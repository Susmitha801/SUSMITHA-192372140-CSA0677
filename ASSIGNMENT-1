1.TWO SUM
def two_sum(nums, target):
    num_dict = {}
    for i, num in enumerate(nums):
        if num in num_dict:
            return [num_dict[num], i]
        else:
            num_dict[target - num] = i

2.ADD TWO NUMBERS
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1, l2):
        dummy = ListNode()
        current = dummy
        carry = 0
    while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            if l2:
                carry += l2.val
                l2 = l2.next
            current.next = ListNode(carry % 10)
            current = current.next
            carry //= 10
return dummy.next


3.LONGEST SUBSTRING WITHOUT REPEATING CHARATERS
def lengthOfLongestSubstring(s):
    if not s:
        return 0
    max_length = 0
    start = 0
    char_dict = {}
    for end in range(len(s)):
        if s[end] in char_dict:
            start = max(start, char_dict[s[end]] + 1)
        char_dict[s[end]] = end
        max_length = max(max_length, end - start + 1)
return max_length


4.MEDIAN OF TWO SORTED ARRAYS
def findMedianSortedArrays(nums1, nums2):
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1
n1, n2 = len(nums1), len(nums2)
    left, right = 0, n1
while left <= right:
        partitionX = (left + right) // 2
        partitionY = (n1 + n2 + 1) // 2 - partitionX
        maxLeftX = nums1[partitionX - 1] if partitionX != 0 else float('-inf')
        minRightX = nums1[partitionX] if partitionX != n1 else float('inf')
        maxLeftY = nums2[partitionY - 1] if partitionY != 0 else float('-inf')
        minRightY = nums2[partitionY] if partitionY != n2 else float('inf')
        if maxLeftX <= minRightY and maxLeftY <= minRightX:
            if (n1 + n2) % 2 == 0:
                return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2
            else:
                return max(maxLeftX, maxLeftY)
        elif maxLeftX > minRightY:
            right = partitionX - 1
        else:
            left = partitionX + 1

5.LONGEST PALINDROMIC SUBSTRING
def longest_palindrome(s):
    if not s:
        return ""
    max_length = 0
    max_palindrome = ""
    for i in range(len(s)):
        for j in range(i + 1, len(s) + 1):
            substring = s[i:j]
            if substring == substring[::-1] and len(substring) > max_length:
                max_length = len(substring)
                max_palindrome = substring
      return max_palindrome

6. Zigzag Conversion -
def convert(s, numRows):
    if numRows == 1 or numRows >= len(s):
        return s
    result = [''] * numRows
    index, step = 0, 1
    for char in s:
        result[index] += char
        if index == 0:
            step = 1
        elif index == numRows - 1:
            step = -1
        index += step
    return ''.join(result)

7. Reverse Integer-
def reverse(x):
    if x < 0:
        sign = -1
        x = abs(x)
    else:
        sign = 1
    reversed_num = 0
    while x:
        reversed_num = reversed_num * 10 + x % 10
        x //= 10
    if reversed_num > 2**31 - 1:
        return 0
    return sign * reversed_num


8.String to Integer (atoi)-
def myAtoi(s):
    s = s.lstrip()  # Remove leading whitespace
    if not s:
        return 0
    sign = 1
    if s[0] in ['-', '+']:
        sign = -1 if s[0] == '-' else 1
        s = s[1:]
    result = 0
    for char in s:
        if not char.isdigit():
            break
        result = result * 10 + int(char)
    result *= sign
    if result < -2**31:
        return -2**31
    elif result > 2**31 - 1:
        return 2**31 - 1
    else:
        return result

9. Palindrome Number-
def is_palindrome(x):
    if x < 0:
        return False
    return str(x) == str(x)[::-1]


10.Regular Expression Matching-
def isMatch(s, p):
    if not p:
        return not s
    first_match = bool(s) and p[0] in {s[0], '.'}
    if len(p) >= 2 and p[1] == '*':
        return (isMatch(s, p[2:]) or
                first_match and isMatch(s[1:], p))
    else:
        return first_match and isMatch(s[1:], p[1:])
