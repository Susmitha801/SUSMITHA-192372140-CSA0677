@@ -0,0 +1,119 @@
from queue import PriorityQueue

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeKLists(lists):
    head = point = ListNode(0)
    q = PriorityQueue()
    for l in lists:
        if l:
            q.put((l.val, l))

    while not q.empty():
        val, node = q.get()
        point.next = ListNode(val)
        point = point.next
        node = node.next
        if node:
            q.put((node.val, node))

    return head.next

# Example Input
lists = [[1,4,5],[1,3,4],[2,6]]

# Convert input to linked lists
linked_lists = []
for lst in lists:
    dummy = ListNode(0)
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    linked_lists.append(dummy.next)

# Merge linked lists
merged_list = mergeKLists(linked_lists)

# Print the merged list
result = []
while merged_list:
    result.append(merged_list.val)
    merged_list = merged_list.next

print(result)



def min_operations(arr1, arr2):
    n, m = len(arr1), len(arr2)
    dp = {0: -arr2[0]}
    for i in range(1, n):
        new_dp = {}
        for key in dp:
            if arr1[i] > arr1[i - 1] + dp[key]:
                new_dp[key] = max(new_dp.get(key, 0), -arr2[i])
            if arr2[i] > arr1[i - 1]:
                new_dp[key + 1] = max(new_dp.get(key + 1, 0), arr2[i])
        dp = new_dp
    if not dp:
        return -1
    return n - max(dp)

# Example
arr1 = [1, 5, 3, 6, 7]
arr2 = [1, 3, 2, 4]
print(min_operations(arr1, arr2))  # Output: 1



def findMedianSortedArrays(nums1, nums2):
    nums = sorted(nums1 + nums2)
    n = len(nums)
    if n % 2 == 0:
        return (nums[n // 2 - 1] + nums[n // 2]) / 2
    else:
        return nums[n // 2]

nums1 = [1, 3]
nums2 = [2]
print(findMedianSortedArrays(nums1, nums2))


def min_repeating(a, b):
    for i in range(1, len(b) // len(a) + 2):
        if b in a * i:
            return i
    return -1

# Example
a = "abcd"
b = "cdabcdab"
print(min_repeating(a, b))  # Output: 3



def fourSum(nums, target):
    nums.sort()
    result = []
    n = len(nums)
    for a in range(n):
        for b in range(a + 1, n):
            for c in range(b + 1, n):
                for d in range(c + 1, n):
                    if nums[a] + nums[b] + nums[c] + nums[d] == target:
                        result.append([nums[a], nums[b], nums[c], nums[d]])
    return result

# Example 1
nums = [1, 0, -1, 0, -2, 2]
target = 0
print(fourSum(nums, target))

# Example 2
nums = [2, 2, 2, 2, 2]
target = 8
print(fourSum(nums, target))
