1.def missing_number(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return total_sum - actual_sum

# Example
nums = [3, 0, 1]
print(missing_number(nums))  # Output: 2

2.from collections import Counter

def majority_element(nums):
    counts = Counter(nums)
    return max(counts, key=counts.get)

# Example
nums = [3, 2, 3]
print(majority_element(nums))  # Output: 3

3.def generate_max_local(grid):
    n = len(grid)
    max_local = [[0] * (n - 2) for _ in range(n - 2)]

    for i in range(n - 2):
        for j in range(n - 2):
            max_local[i][j] = max(grid[i][j], grid[i][j + 1], grid[i][j + 2],
                                  grid[i + 1][j], grid[i + 1][j + 1], grid[i + 1][j + 2],
                                  grid[i + 2][j], grid[i + 2][j + 1], grid[i + 2][j + 2])

    return max_local

grid = [[9, 9, 8, 1], [5, 6, 2, 6], [8, 2, 6, 4], [6, 2, 2, 2]]
result = generate_max_local(grid)
print(result)

4.class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sort_linked_list(head):
    if not head or not head.next:
        return head

    values = []
    current = head
    while current:
        values.append(current.val)
        current = current.next

    values.sort()

    current = head
    for val in values:
        current.val = val
        current = current.next

    return head

5.def count_prefix(words, pref):
    return sum(1 for word in words if word.startswith(pref))

words = ["pay", "attention", "practice", "attend"]
pref = "at"
print(count_prefix(words, pref))  # Output: 2


6.from collections import defaultdict

def group_anagrams(strs):
    grouped_anagrams = defaultdict(list)

    for word in strs:
        key = ''.join(sorted(word))
        grouped_anagrams[key].append(word)

    return list(grouped_anagrams.values())

# Example 1
strs1 = ["eat", "tea", "tan", "ate", "nat", "bat"]
print(group_anagrams(strs1))

# Example 2
strs2 = [""]
print(group_anagrams(strs2))

7.def setZeroes(matrix):
    rows, cols = len(matrix), len(matrix[0])
    zero_rows, zero_cols = set(), set()

    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 0:
                zero_rows.add(i)
                zero_cols.add(j)

    for i in range(rows):
        for j in range(cols):
            if i in zero_rows or j in zero_cols:
                matrix[i][j] = 0

matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]
setZeroes(matrix)
print(matrix)

8.def countGoodTriplets(nums1, nums2):
    n = len(nums1)
    count = 0
    for x in range(n):
        for y in range(x+1, n):
            for z in range(y+1, n):
                if nums1[x] < nums1[y] < nums1[z] and nums2[x] < nums2[y] < nums2[z]:
                    count += 1
    return count

def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return list(set1.intersection(set2))

def findKthLargest(nums, k):
    nums.sort(reverse=True)
    return nums[k-1]
