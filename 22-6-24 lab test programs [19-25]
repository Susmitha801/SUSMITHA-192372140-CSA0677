9.def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return list(set1.intersection(set2))

# Test the function
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
print(intersection(nums1, nums2)) 
# Output: [2]

20.import heapq

def findKthLargest(nums, k):
    heap = []
    for num in nums:
        heapq.heappush(heap, num)
        if len(heap) > k:
            heapq.heappop(heap)
    return heap[0]

21.import itertools

def count_good_strings(n, s1, s2, evil):
    mod = 10**9 + 7
    count = 0
    for perm in itertools.product(range(26), repeat=n):
        string = ''.join(chr(ord(s1[i]) + perm[i]) for i in range(n))
        if s1 <= string <= s2 and evil not in string:
            count = (count + 1) % mod
    return count

# Example Usage
n = 2
s1 = "aa"
s2 = "da"
evil = "b"
print(count_good_strings(n, s1, s2, evil)) 
# Output: 51

22.def majority_element(nums):
    counts = {}
    for num in nums:
        counts[num] = counts.get(num, 0) + 1
        if counts[num] > len(nums) // 2:
            return num

# Test the function
nums1 = [3, 2, 3]
print(majority_element(nums1))  
# Output: 3

nums2 = [2, 2, 1, 1, 1, 2, 2]
print(majority_element(nums2)) 
# Output: 2

23.def transpose_matrix_zip(matrix):
    return [list(row) for row in zip(*matrix)]

# Example 1
matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(transpose_matrix_zip(matrix1)) 
# Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

# Example 2
matrix2 = [[1, 2, 3], [4, 5, 6]]
print(transpose_matrix_zip(matrix2)) 
# Output: [[1, 4], [2, 5], [3, 6]]

24.def count_pairs(nums1, nums2, diff):
    n = len(nums1)
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff:
                count += 1
    return count

# Example Usage
nums1 = [3, 2, 5]
nums2 = [2, 2, 1]
diff = 1
print(count_pairs(nums1, nums2, diff)) 
# Output: 3

25.def findNthDigit(n):
    n -= 1
    for digits in range(1, 11):
        first_num = 10 ** (digits - 1)
        if n < 9 * digits * first_num:
            return int(str(first_num + n // digits)[n % digits])
        n -= 9 * digits * first_num
    return -1  # If n is out of range

# Test the function
print(findNthDigit(3)) 
# Output: 3
print(findNthDigit(11))  
# Output: 0
